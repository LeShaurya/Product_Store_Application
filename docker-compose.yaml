version: '3.8'
services:
  product-database:
    image: mongo:latest
    container_name: product-database
    ports:
      - "27017:27017"
    volumes:
      - './mongo/data:/data/db'
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_interval: 5s
    networks:
      - product-net
      - common-net

  inventory-database:
    image: mysql:latest
    container_name: inventory-database
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: inventory
      MYSQL_PASSWORD: root
    ports:
      - "3316:3306"
    volumes:
      - './mysql/inventory/data:/var/lib/mysql'
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      timeout: 20s
      retries: 10
      start_interval: 5s
    networks:
      - inventory-net
      - common-net

  order-database:
    image: mysql:latest
    container_name: order-database
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orders
      MYSQL_PASSWORD: root
    ports:
      - "3326:3306"
    volumes:
      - './mysql/orders/data:/var/lib/mysql'
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      timeout: 20s
      retries: 10
      start_interval: 5s
    networks:
      - order-net
      - common-net

  products:
    build:
      context: ./products/
    expose:
      - "8090"
    depends_on:
      product-database:
        condition: service_healthy
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://product-database:27017/products
    networks:
      - product-net
      - common-net

  inventory:
    build:
      context: ./inventory/
    expose:
      - "8092"
    depends_on:
      inventory-database:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://inventory-database:3306/inventory
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    networks:
      - inventory-net
      - common-net

  orders:
    build:
      context: ./orders/
    expose:
      - "8091"
    depends_on:
      order-database:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://order-database:3306/orders
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    networks:
      - order-net
      - kafka-net
      - common-net

  notification:
    build:
      context: ./notification/
    ports:
      - "8094"
    depends_on:
      - orders
    networks:
      - common-net
      - kafka-net
    environment:
      TWILIO_ACCOUNT_SID:
      TWILIO_AUTH_TOKEN:
      TWILIO_PHONE_NUMBER:

  gateway:
    build:
      context: ./gateway/
    ports:
      - "8093:8093"
    networks:
      - common-net
    depends_on:
      - products
      - orders
      - inventory

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      KAFKA_OPTS: -Djute.maxbuffer=500000000
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - kafka-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8080:8080"
    networks:
      - kafka-net

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |
        echo "Waiting for Kafka to be ready...";
        sleep 5;
        kafka-topics --create --topic order-created --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1;
        echo "Topics created successfully!";
    networks:
      - kafka-net

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8
    volumes:
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      timeout: 20s
      retries: 10
      start_interval: 5s
    networks:
      - common-net


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      timeout: 20s
      retries: 10
      start_interval: 5s
    networks:
      - common-net

  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
      - common-net

  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - common-net


  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    networks:
      - common-net

networks:
  product-net:
    driver: bridge
  inventory-net:
    driver: bridge
  order-net:
    driver: bridge
  kafka-net:
    driver: bridge
  common-net:
    driver: bridge